{"version":3,"file":"index-BjvNEG7h.js","sources":["../../src/constants.ts","../../src/validators.ts","../../src/api.ts","../../src/main.ts"],"sourcesContent":["/**\n * Text messages for the login form\n * All user-facing text content is centralized here for easy localization\n */\nexport const MESSAGES = {\n    // Field validation errors\n    EMAIL_REQUIRED: 'Email is required',\n    EMAIL_INVALID: 'Please enter a valid email address',\n    PASSWORD_REQUIRED: 'Password is required',\n    PASSWORD_MIN_LENGTH: 'Password must be at least 8 characters long',\n    \n    // General errors\n    INVALID_CREDENTIALS: 'Invalid email or password. Please check your credentials and try again.',\n    NETWORK_ERROR: 'Network error. Please try again later.',\n    UNEXPECTED_ERROR: 'An unexpected error occurred. Please try again.',\n    \n    // Status messages\n    SIGNING_IN: 'Signing in, please wait',\n    LOGIN_SUCCESSFUL: 'Login successful, redirecting',\n    SUCCESS_MESSAGE: 'Successfully signed in! Redirecting...',\n    \n    // Accessibility messages\n    FORM_ERRORS: 'Please fix the errors before submitting',\n    PASSWORD_VISIBLE: 'Password is now visible',\n    PASSWORD_HIDDEN: 'Password is now hidden',\n    SHOW_PASSWORD: 'Show password',\n    HIDE_PASSWORD: 'Hide password',\n    BUTTON_INCOMPLETE: 'Sign in button - form is incomplete',\n    BUTTON_READY: 'Sign in',\n    \n    // Mock API responses\n    MOCK_CREDENTIALS_ERROR: 'Invalid email or password. Try test@example.com / password123 or demo@evilmartians.com / martians2025',\n    \n    // Demo alerts\n    SOCIAL_LOGIN: 'Social login with {provider} clicked. In a real app, this would redirect to {provider} OAuth.',\n    FORGOT_PASSWORD: 'Forgot password clicked. In a real app, this would open a password reset form.',\n    SIGN_UP: 'Sign up clicked. In a real app, this would navigate to the registration page.',\n    LOGIN_SUCCESS_DEMO: 'Login successful! In a real app, you would be redirected to the dashboard.'\n  };\n  \n  /**\n   * Configuration constants\n   */\n  export const CONFIG = {\n    PASSWORD_MIN_LENGTH: 8,\n    ERROR_AUTO_HIDE_TIMEOUT: 10000,\n    REDIRECT_DELAY: 1500,\n    NETWORK_DELAY: 2000,\n    EMAIL_PATTERN: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n  };\n  \n  /**\n   * CSS selectors used throughout the application\n   */\n  export const SELECTORS = {\n    FORM: '#loginForm',\n    EMAIL_INPUT: '#email',\n    PASSWORD_INPUT: '#password',\n    PASSWORD_TOGGLE: '.password-toggle',\n    SUBMIT_BTN: '.submit-btn',\n    REMEMBER_CHECKBOX: '#remember',\n    GENERAL_ERROR: '#general-error',\n    SUCCESS_MESSAGE: '#success-message',\n    ANNOUNCER: '#aria-announcer',\n    SOCIAL_BTNS: '.social-btn',\n    FORGOT_LINK: '.forgot-link',\n    SIGNUP_LINK: '.signup-link a',\n    EYE_OPEN: '.eye-open',\n    EYE_CLOSED: '.eye-closed',\n    SUBMIT_STATUS: '#submit-status'\n  };\n  ","export interface ValidationResult {\n  isValid: boolean;\n  message?: string;\n}\n\nexport function validateEmail(email: string): ValidationResult {\n  if (!email || email.trim() === '') {\n    return {\n      isValid: false,\n      message: 'Email is required'\n    };\n  }\n\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  if (!emailRegex.test(email)) {\n    return {\n      isValid: false,\n      message: 'Please enter a valid email address'\n    };\n  }\n\n  return {\n    isValid: true\n  };\n}\n\nexport function validatePassword(password: string): ValidationResult {\n  if (!password || password.trim() === '') {\n    return {\n      isValid: false,\n      message: 'Password is required'\n    };\n  }\n\n  if (password.length < 6) {\n    return {\n      isValid: false,\n      message: 'Password must be at least 6 characters long'\n    };\n  }\n\n  return {\n    isValid: true\n  };\n}\n\nexport function isFormValid(email: string, password: string): boolean {\n  const emailResult = validateEmail(email);\n  const passwordResult = validatePassword(password);\n  \n  return emailResult.isValid && passwordResult.isValid;\n}\n","export interface LoginCredentials {\n  email: string;\n  password: string;\n  remember: boolean;\n}\n\nexport interface LoginResult {\n  success: boolean;\n  message?: string;\n}\n\nexport class AuthService {\n  static async login(credentials: LoginCredentials): Promise<LoginResult> {\n    // Симуляция API запроса\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        // Проверка тестовых учетных данных\n        const validCredentials = [\n          { email: 'test@example.com', password: 'password123' },\n          { email: 'demo@evilmartians.com', password: 'martians2025' }\n        ];\n\n        const isValid = validCredentials.some(\n          cred => cred.email === credentials.email && cred.password === credentials.password\n        );\n\n        if (isValid) {\n          resolve({\n            success: true,\n            message: 'Login successful'\n          });\n        } else {\n          resolve({\n            success: false,\n            message: 'Invalid email or password'\n          });\n        }\n      }, 1000); // Симуляция задержки сети\n    });\n  }\n}\n","import { MESSAGES, CONFIG, SELECTORS } from './constants';\nimport { validateEmail, validatePassword, isFormValid } from './validators';\nimport { AuthService } from './api';\n\n// Types\ninterface ValidationResult {\n  isValid: boolean;\n  message?: string;\n}\n\ninterface LoginCredentials {\n  email: string;\n  password: string;\n  remember: boolean;\n}\n\ninterface LoginResult {\n  success: boolean;\n  message?: string;\n}\n\n/**\n * Login form component\n * Handles user authentication with validation and accessibility features\n */\nclass LoginForm {\n  private form!: HTMLFormElement;\n  private emailInput!: HTMLInputElement;\n  private passwordInput!: HTMLInputElement;\n  private passwordToggle!: HTMLButtonElement;\n  private submitBtn!: HTMLButtonElement;\n  private rememberCheckbox!: HTMLInputElement;\n  private generalErrorEl!: HTMLElement | null;\n  private successMessageEl!: HTMLElement | null;\n  private announcer!: HTMLElement | null;\n\n  constructor() {\n    this.initializeElements();\n    this.init();\n  }\n\n  // Initialize DOM element references\n  private initializeElements(): void {\n    this.form = document.querySelector(SELECTORS.FORM) as HTMLFormElement;\n    this.emailInput = document.querySelector(SELECTORS.EMAIL_INPUT) as HTMLInputElement;\n    this.passwordInput = document.querySelector(SELECTORS.PASSWORD_INPUT) as HTMLInputElement;\n    this.passwordToggle = document.querySelector(SELECTORS.PASSWORD_TOGGLE) as HTMLButtonElement;\n    this.submitBtn = document.querySelector(SELECTORS.SUBMIT_BTN) as HTMLButtonElement;\n    this.rememberCheckbox = document.querySelector(SELECTORS.REMEMBER_CHECKBOX) as HTMLInputElement;\n    this.generalErrorEl = document.querySelector(SELECTORS.GENERAL_ERROR);\n    this.successMessageEl = document.querySelector(SELECTORS.SUCCESS_MESSAGE);\n    this.announcer = document.querySelector(SELECTORS.ANNOUNCER);\n  }\n\n  // Initialize the form component\n  private init(): void {\n    this.bindEvents();\n    this.setupAccessibility();\n    this.updateButtonState();\n  }\n\n  // Bind all event listeners\n  private bindEvents(): void {\n    // Form submission\n    this.form.addEventListener('submit', this.handleSubmit.bind(this));\n\n    // Password toggle\n    this.passwordToggle.addEventListener('click', this.togglePassword.bind(this));\n\n    // Real-time validation\n    this.emailInput.addEventListener('blur', () => this.handleFieldValidation('email'));\n    this.passwordInput.addEventListener('blur', () => this.handleFieldValidation('password'));\n    this.emailInput.addEventListener('input', () => this.handleFieldInput('email'));\n    this.passwordInput.addEventListener('input', () => this.handleFieldInput('password'));\n\n    // External links\n    this.bindExternalLinks();\n\n    // Keyboard navigation\n    this.setupKeyboardNavigation();\n  }\n\n  // Bind external link events\n  private bindExternalLinks(): void {\n    document.querySelectorAll(SELECTORS.SOCIAL_BTNS).forEach(btn => {\n      btn.addEventListener('click', this.handleSocialLogin.bind(this));\n    });\n\n    const forgotLink = document.querySelector(SELECTORS.FORGOT_LINK);\n    forgotLink?.addEventListener('click', this.handleForgotPassword.bind(this));\n\n    const signupLink = document.querySelector(SELECTORS.SIGNUP_LINK);\n    signupLink?.addEventListener('click', this.handleSignUp.bind(this));\n  }\n\n  private handleFieldValidation(field: 'email' | 'password'): void {\n    this.validateField(field);\n    this.updateButtonState();\n  }\n\n  private handleFieldInput(field: 'email' | 'password'): void {\n    this.clearError(field);\n    this.updateButtonState();\n  }\n\n  // Setup accessibility features\n  private setupAccessibility(): void {\n    // Password toggle keyboard support\n    this.passwordToggle.addEventListener('keydown', (e) => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault();\n        this.togglePassword();\n      }\n    });\n  }\n\n  // Setup keyboard navigation for custom elements\n  private setupKeyboardNavigation(): void {\n    // Remember checkbox\n    this.rememberCheckbox.addEventListener('keydown', (e) => {\n      if (e.key === ' ') {\n        e.preventDefault();\n        this.rememberCheckbox.checked = !this.rememberCheckbox.checked;\n      }\n    });\n\n    // Interactive elements\n    document.querySelectorAll<HTMLElement>(`${SELECTORS.SOCIAL_BTNS}, ${SELECTORS.FORGOT_LINK}, ${SELECTORS.SIGNUP_LINK}`)\n      .forEach(element => {\n        element.addEventListener('keydown', (e: KeyboardEvent) => {\n          if (e.key === 'Enter') {\n            e.preventDefault();\n            element.click();\n          }\n        });\n      });\n\n  }\n\n  // Update submit button state based on form validity\n  private updateButtonState(): void {\n    const email = this.emailInput.value.trim();\n    const password = this.passwordInput.value;\n\n    const formValid = isFormValid(email, password);\n\n    this.submitBtn.disabled = !formValid;\n    this.submitBtn.classList.toggle('disabled', !formValid);\n    this.submitBtn.setAttribute('aria-label',\n      formValid ? MESSAGES.BUTTON_READY : MESSAGES.BUTTON_INCOMPLETE\n    );\n  }\n\n  // Handle form submission\n  private async handleSubmit(e: Event): Promise<void> {\n    e.preventDefault();\n\n    this.clearAllErrors();\n\n    // Validate all fields\n    const emailValid = this.validateField('email');\n    const passwordValid = this.validateField('password');\n\n    if (!emailValid || !passwordValid) {\n      this.announceError(MESSAGES.FORM_ERRORS);\n      return;\n    }\n\n    await this.processLogin();\n  }\n\n  // Process login request\n  private async processLogin(): Promise<void> {\n    this.setLoadingState(true);\n    this.announceStatus(MESSAGES.SIGNING_IN);\n\n    try {\n      const credentials: LoginCredentials = {\n        email: this.emailInput.value.trim(),\n        password: this.passwordInput.value,\n        remember: this.rememberCheckbox.checked\n      };\n\n      const result: LoginResult = await AuthService.login(credentials);\n\n      if (result.success) {\n        this.handleLoginSuccess();\n      } else {\n        this.handleLoginError(result.message);\n      }\n\n    } catch (error) {\n      this.handleLoginError(this.getErrorMessage(error as Error));\n    } finally {\n      this.setLoadingState(false);\n    }\n  }\n\n  // Handle successful login\n  private handleLoginSuccess(): void {\n    this.showSuccess(MESSAGES.SUCCESS_MESSAGE);\n    this.announceStatus(MESSAGES.LOGIN_SUCCESSFUL);\n\n    setTimeout(() => {\n      alert(MESSAGES.LOGIN_SUCCESS_DEMO);\n    }, CONFIG.REDIRECT_DELAY);\n  }\n\n  // Handle login error\n  private handleLoginError(message?: string): void {\n    const errorMessage = message || MESSAGES.INVALID_CREDENTIALS;\n    this.showGeneralError(errorMessage);\n    this.announceError(`Login failed: ${errorMessage}`);\n  }\n\n  // Get appropriate error message based on error type\n  private getErrorMessage(error: Error): string {\n    if (error.message.includes('Invalid email or password')) {\n      return MESSAGES.INVALID_CREDENTIALS;\n    } else if (error.message.includes('network') || error.message.includes('fetch')) {\n      return MESSAGES.NETWORK_ERROR;\n    }\n    return MESSAGES.UNEXPECTED_ERROR;\n  }\n\n  // Validate a specific field\n  private validateField(field: 'email' | 'password'): boolean {\n    const input = this[`${field}Input`] as HTMLInputElement;\n    const value = input.value;\n    const validator = field === 'email' ? validateEmail : validatePassword;\n    const result: ValidationResult = validator(value);\n\n    if (!result.isValid && result.message) {\n      this.showError(field, result.message);\n      return false;\n    }\n\n    return true;\n  }\n\n  // Show field-specific error\n  private showError(field: string, message: string): void {\n    const input = document.getElementById(field) as HTMLInputElement | null;\n    const errorElement = document.getElementById(`${field}-error`) as HTMLElement | null;\n\n    if (input && errorElement) {\n      input.classList.add('error');\n      input.setAttribute('aria-invalid', 'true');\n      errorElement.textContent = `⚠ ${message}`;\n      errorElement.style.display = 'flex';\n    }\n  }\n\n  // Show general error message\n  private showGeneralError(message: string): void {\n    if (this.generalErrorEl) {\n      this.generalErrorEl.textContent = `⚠ ${message}`;\n      this.generalErrorEl.style.display = 'block';\n\n      setTimeout(() => this.hideGeneralError(), CONFIG.ERROR_AUTO_HIDE_TIMEOUT);\n    }\n  }\n\n  /**\n   * Hide general error message\n   */\n  private hideGeneralError(): void {\n    if (this.generalErrorEl) {\n      this.generalErrorEl.style.display = 'none';\n      this.generalErrorEl.textContent = '';\n    }\n  }\n\n  // Show success message\n  private showSuccess(message: string): void {\n    if (this.successMessageEl) {\n      this.successMessageEl.textContent = `✓ ${message}`;\n      this.successMessageEl.style.display = 'block';\n    }\n  }\n\n  // Hide success message\n  private hideSuccess(): void {\n    if (this.successMessageEl) {\n      this.successMessageEl.style.display = 'none';\n      this.successMessageEl.textContent = '';\n    }\n  }\n\n  // Clear field-specific error\n  private clearError(field: string): void {\n    const input = document.getElementById(field) as HTMLInputElement | null;\n    const errorElement = document.getElementById(`${field}-error`) as HTMLElement | null;\n\n    if (input && errorElement) {\n      input.classList.remove('error');\n      input.setAttribute('aria-invalid', 'false');\n      errorElement.textContent = '';\n      errorElement.style.display = 'none';\n    }\n  }\n\n  // Clear all error and success messages\n  private clearAllErrors(): void {\n    (['email', 'password'] as const).forEach(field => this.clearError(field));\n    this.hideGeneralError();\n    this.hideSuccess();\n  }\n\n  // Set form loading state\n  private setLoadingState(isLoading: boolean): void {\n    this.submitBtn.disabled = isLoading;\n    this.submitBtn.classList.toggle('loading', isLoading);\n\n    // Disable form inputs during loading\n    this.form.querySelectorAll('input, button').forEach(input => {\n      const element = input as HTMLInputElement | HTMLButtonElement;\n      if (element !== this.submitBtn) {\n        element.disabled = isLoading;\n      }\n    });\n\n    if (!isLoading) {\n      this.updateButtonState();\n    }\n  }\n\n  // Toggle password visibility\n  private togglePassword(): void {\n    const isPassword = this.passwordInput.type === 'password';\n    const eyeOpen = this.passwordToggle.querySelector(SELECTORS.EYE_OPEN) as HTMLElement;\n    const eyeClosed = this.passwordToggle.querySelector(SELECTORS.EYE_CLOSED) as HTMLElement;\n\n    this.passwordInput.type = isPassword ? 'text' : 'password';\n\n    // Toggle icon visibility\n    eyeClosed.style.display = isPassword ? 'none' : 'block';\n    eyeOpen.style.display = isPassword ? 'block' : 'none';\n\n    this.passwordToggle.setAttribute('aria-label',\n      isPassword ? MESSAGES.HIDE_PASSWORD : MESSAGES.SHOW_PASSWORD\n    );\n\n    this.announceStatus(isPassword ? MESSAGES.PASSWORD_VISIBLE : MESSAGES.PASSWORD_HIDDEN);\n  }\n\n  // Handle social login click\n  private handleSocialLogin(e: Event): void {\n    e.preventDefault();\n    const target = e.currentTarget as HTMLElement;\n    const provider = target.textContent?.trim() || '';\n    const message = MESSAGES.SOCIAL_LOGIN.replace(/{provider}/g, provider);\n    alert(message);\n  }\n\n  // Handle forgot password click\n  private handleForgotPassword(e: Event): void {\n    e.preventDefault();\n    alert(MESSAGES.FORGOT_PASSWORD);\n  }\n\n  // Handle sign up click\n  private handleSignUp(e: Event): void {\n    e.preventDefault();\n    alert(MESSAGES.SIGN_UP);\n  }\n\n  // Announce status to screen readers\n  private announceStatus(message: string): void {\n    const statusElement = document.querySelector(SELECTORS.SUBMIT_STATUS) as HTMLElement | null;\n    if (statusElement) {\n      statusElement.textContent = message;\n    }\n  }\n\n  // Announce error to screen readers\n  private announceError(message: string): void {\n    if (this.announcer) {\n      this.announcer.textContent = message;\n    }\n  }\n}\n\n// Initialize the form when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n  new LoginForm();\n  console.log('Evil Martians Login Form initialized successfully!');\n  console.log('Test credentials: test@example.com / password123 or demo@evilmartians.com / martians2025');\n});\n"],"names":["MESSAGES","CONFIG","SELECTORS","validateEmail","email","validatePassword","password","isFormValid","emailResult","passwordResult","AuthService","credentials","resolve","isValid","cred","LoginForm","btn","field","element","e","formValid","emailValid","passwordValid","result","error","message","errorMessage","value","input","errorElement","isLoading","isPassword","eyeOpen","eyeClosed","provider","statusElement"],"mappings":"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"}